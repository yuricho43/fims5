@page "/Management/UserManagement"

@using Fims5.Data.Identity;
@using Fims5.Data.Entities;
@using Fims5.Entities
@using Microsoft.AspNetCore.Identity
@using Telerik.FontIcons;
@using Telerik.SvgIcons;

@inject UserManager<ApplicationUser> UserManager

<div class="flex-center">
    <TelerikCard>
        <CardHeader>
            <CardTitle><h2 class="card-title mb-4" style="align-self:center"><strong>사용자 관리</strong></h2></CardTitle>
            <CardSubTitle>조회/수정/추가/삭제</CardSubTitle>
        </CardHeader>

        <CardBody>
            <ErrorsList ShowErrors="ShowErrors" Errors="Errors" />

            <TelerikGrid Data=@UserAuthInfoModels
                         EditMode="@GridEditMode.Inline"
                         Height="500px"
                         Resizable="true"
                         Pageable="true"
                         PageSize="@PageSize"
                         OnUpdate="@ChangeUserRole"
                         OnDelete="@DeleteUser">
                <GridToolBarTemplate>
                    <GridCommandButton OnClick="ShowAddUserDialog" Icon="@FontIcon.PlusCircle" ThemeColor="@(ThemeConstants.Button.ThemeColor.Error)" Class="add-user-button"><strong>사용자 추가</strong></GridCommandButton>
                </GridToolBarTemplate>
 
                <GridSettings>
                    <GridValidationSettings Enabled="@EnabledValidation" />
                </GridSettings>

                <GridColumns>
                    <GridColumn Field=@nameof(UserAuthInfoModel.HangulName) Width="80px" Title="이름" Editable="false" />
                    <GridColumn Field=@nameof(UserAuthInfoModel.UserName) Width="100px" Title="ID" Editable="false" />
                    <GridColumn Field=@nameof(UserAuthInfoModel.Email) Width="140px" Title="Email" Editable="false" />

                    <GridColumn Field=@nameof(UserAuthInfoModel.Role) Width="80px" Title="권한">
                        <EditorTemplate>
                            @{
                                var model = context as UserAuthInfoModel;
                                <TelerikDropDownList Data="@UserRoleNames" @bind-Value="@model.Role" />
                            }
                        </EditorTemplate>
                    </GridColumn>

                    <GridCommandColumn Width="250px">
                        <GridCommandButton Icon="@FontIcon.Lock" Command="Edit" ThemeColor="@ThemeConstants.Button.ThemeColor.Primary">권한변경</GridCommandButton>
                        <GridCommandButton Icon="@FontIcon.ArrowRotateCcw" OnClick="@((args)=> ResetPassword(args.Item as UserAuthInfoModel))" ThemeColor="@(ThemeConstants.Button.ThemeColor.Primary)">암호초기화</GridCommandButton>
                        <GridCommandButton Icon="@FontIcon.Trash" Command="Delete" ThemeColor="@(ThemeConstants.Button.ThemeColor.Warning)">계정삭제</GridCommandButton>
                        <GridCommandButton Command="Save" Icon="@FontIcon.Save" ThemeColor="@(ThemeConstants.Button.ThemeColor.Warning)" ShowInEdit="true">변경저장</GridCommandButton>
                        <GridCommandButton Command="Cancel" Icon="@FontIcon.Cancel" ShowInEdit="true">취소</GridCommandButton>
                    </GridCommandColumn>
                </GridColumns>
            </TelerikGrid>

        </CardBody>

@*        <CardFooter Class="k-hbox justify-space-between">
            <span>© 2023 FST (https://www.fstc.co.kr), All Rights Reserved.</span>
        </CardFooter>
*@
    </TelerikCard>
</div>


<div class="notification-parent">
    <TelerikNotification @ref="UserManagementNotificationComponent"
                         Class="MyTelerikNotification"
                         VerticalPosition="@NotificationVerticalPosition.Top"
                         HorizontalPosition="@NotificationHorizontalPosition.Center">
    </TelerikNotification>
</div>


@if (AddUserDialogVisible)
{
    <AddUserDialog AddUserFinished="OnAddUserFinished"></AddUserDialog>
}

<style>
    .MyTelerikNotification .k-notification-container .k-notification-wrap {
        width: 300px;
        height: 50px;
        font-size: 1.5em;
        text-align: center;
        align-items: center;
    }
</style>

<style>
    .k-grid td, .k-grid tr {
        background-color: #E0E0E0;
        color: black;
        border-width: 0px 1px 1px 0px !important;
        border-color: white !important;
    }

    .k-grid-header-wrap th {
        background-color: teal;
        color: white;
        border-width: 0px 1px 1px 0px !important;
        border-color: white !important;
    }

    /*
        .k-grid-header {
            color: whitesmoke;
            background-color: teal;
        }
    */

    .k-grid .k-focused-cell {
        background-color: cornflowerblue;
    }

    .k-grid .k-disabled-cell {
        background-color: #CACACA;
    }

    .k-grid .userinput-empty {
        //color: dodgerblue;
        background-color: #E0FAFA;
        //font-weight: bold;
    }

    .k-grid .userinput-valid {
        color: dodgerblue;
        background-color: #C0D8DA;
        font-weight: bold;
    }

    .k-grid .userinput-invalid {
        color: red !important;
        background-color: sandybrown;
        font-weight: bold !important;
        //opacity: 0.7;
    }

    /* CENTER */
    /* non-sortable headers */
    .k-grid th.center-me {
        text-align: center;
    }

    /* sortable headers */
    th.center-me .k-cell-inner > .k-link {
        justify-content: center;
    }

    /* RIGHT */
    /* non-sortable headers */
    .k-grid th.align-right {
        text-align: right;
    }

    /* sortable headers */
    th.align-right .k-cell-inner > .k-link {
        justify-content: right;
    }

    /* unbound and non-filterable columns */
    .k-grid-header th.align-right.right-padding {
        padding-right: 12px;
    }

    /* filterable grid, sortable non-filterable columns */
    .k-grid-header th.align-right.right-padding > .k-cell-inner {
        margin-right: 0;
    }
</style>

<style>
    .add-user-button {
        height: 40px;
    }
</style>
