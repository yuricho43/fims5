@using Fims5.Common
@using Telerik.FontIcons
@inherits LayoutComponentBase

<TelerikRootComponent>
    <div class="header">
        <div class="nav-container" style="margin-right: 2em;">
            <div class="menu-button">
                <TelerikButton Size="lg" Icon="FontIcon.Menu" OnClick="ToggleMenuDrawer" ThemeColor="success"></TelerikButton>
            </div>
            <img style="width: 30px;" src="/images/fimsadmin.svg">
            <div class="title">
                <h1>@($"{Constants.FimsTitle} (FIMS4 {Constants.FimsVersion})")</h1>
            </div>
            @{
                if (!WindowWidthSmall)
                {
                    <DigitalClock></DigitalClock>
                    <LoginDisplay></LoginDisplay>
                }
            }
        </div>
    </div>

    <TelerikTooltip TargetSelector=".k-drawer-items span.icon-container[title]" />

    <div class="drawer-container">
        <TelerikDrawer Class="drawer"
                       @ref="FimsDrawer"
                       Data="@FimsDrawerItems"
                       Expanded="@DrawerExpanded"
                       ExpandedChanged="((bool newValue) => ExpandedChangedHandler(newValue))"
                       Width="180px" Mode="DrawerMode.Push" Position="DrawerPosition.Start" MiniMode="true">
            <DrawerContent>
                @Body
           </DrawerContent>
        </TelerikDrawer>
    </div>
    <TelerikMediaQuery Media="(max-width: 768px)" OnChange="((changed) => WindowWidthSmall = changed)"></TelerikMediaQuery>

</TelerikRootComponent>

@code {
    TelerikDrawer<DrawerItem> FimsDrawer { get; set; }
    public IEnumerable<DrawerItem> FimsDrawerItems { get; set; }

    bool DrawerExpanded { get; set; }
    bool SettingsExpanded { get; set; }
    bool WindowWidthSmall { get; set; }

    static int giMenuRandom = 4;

    static IEnumerable<DrawerItem> DrawerItems_Inspector = new List<DrawerItem>
    {
        new DrawerItem{ Text = "검사서 입력", Icon = FontIcon.Grid, Url="/InspectStarter", Group = "home"},
    };

    static IEnumerable<DrawerItem> DrawerItems_Closer = new List<DrawerItem>
    {
        new DrawerItem{ Text = "검사서 마무리", Icon = FontIcon.CheckCircle, Url="/InspectCloser", Group = "home"},
        new DrawerItem{ Text = "검사서 입력", Icon = FontIcon.Grid, Url="/InspectStarter", Group = "home"},
        new DrawerItem{ Text = "검사서 관리", Icon = FontIcon.Data, Url="/Management/TSheetManagement", Group = "ext"},
    };

    static IEnumerable<DrawerItem> DrawerItems_Reporter = new List<DrawerItem>
    {
        new DrawerItem{ Text = "검사서 입력", Icon = FontIcon.Grid, Url="/InspectStarter", Group = "home"},
        new DrawerItem{ Text = "검사서 관리", Icon = FontIcon.Data, Url="/Management/TSheetManagement", Group = "ext"},
    };

    static IEnumerable<DrawerItem> DrawerItems_Manager = new List<DrawerItem>
    {
        new DrawerItem{ Text = "검사서 입력", Icon = FontIcon.Grid, Url="/InspectStarter", Group = "home"},
        new DrawerItem{ Text = "검사서 마무리", Icon = FontIcon.CheckCircle, Url="/InspectCloser", Group = "home"},
        new DrawerItem{ Text = "검사서 관리", Icon = FontIcon.Data, Url="/Management/TSheetManagement", Group = "ext"},
        new DrawerItem{ Text = "사용자 관리", Icon = FontIcon.Myspace, Url="/Management/UserManagement", Group = "ext"},
    };

    static IEnumerable<DrawerItem> DrawerItems_Admin = new List<DrawerItem>
    {
        new DrawerItem{ Text = "검사서 입력", Icon = FontIcon.Grid, Url="/InspectStarter", Group = "home"},
        new DrawerItem{ Text = "검사서 마무리", Icon = FontIcon.CheckCircle, Url="/InspectCloser", Group = "home"},
        new DrawerItem{ Text = "검사서 관리", Icon = FontIcon.Data, Url="/Management/TSheetManagement", Group = "ext"},
        new DrawerItem{ Text = "검사스펙 관리", Icon = FontIcon.Upload, Url="/Management/TSheetSpecsManagement", Group = "ext"},
        new DrawerItem{ Text = "성적서스펙 관리", Icon = FontIcon.FileData, Url="/Management/TReportManagement", Group = "ext"},
        new DrawerItem{ Text = "사용자 관리", Icon = FontIcon.Myspace, Url="/Management/UserManagement", Group = "ext"},
    };

    static Dictionary<string, IEnumerable<DrawerItem>> RoleToDrawerItems = new Dictionary<string, IEnumerable<DrawerItem>>
        {
            ["Inspector"] = DrawerItems_Inspector,
            ["Closer"] = DrawerItems_Closer,
            ["Reporter"] = DrawerItems_Reporter,
            ["Manager"] = DrawerItems_Manager,
            ["Admin"] = DrawerItems_Admin,
        };

    //protected override async Task OnInitializedAsync()
    protected override async Task OnInitializedAsync()
    {
        DrawerExpanded = false;
        Console.WriteLine("--- OnInitializedAsync ");
    }

    async Task ToggleMenuDrawer()
    {
        Console.WriteLine("--- ToggleMenuDrawer ");
        if (DrawerExpanded)
        {
            await FimsDrawer.CollapseAsync();
        }
        else
        {
            await FimsDrawer.ExpandAsync();
        }
    }

    async Task ExpandedChangedHandler(bool value)
    {
        DrawerExpanded = value;
    }

    protected override async Task OnParametersSetAsync()
    {
        /*
        var state = await this.AuthStateProvider.GetAuthenticationStateAsync();
            var user = state.User;

            if (user.Identity.IsAuthenticated)
            {
            var userRole = user.GetUserRole();
            FimsDrawerItems = RoleToDrawerItems[userRole];
            }
            else
            {
            FimsDrawerItems = null;
        }
        */
        SetDrawerUsingRole();
        Console.WriteLine("--- OnParametersSetAsync ");
        StateHasChanged();
    }

    private void SetDrawerUsingRole()
    {
        string userRole = "Admin";
        //giMenuRandom = (giMenuRandom + 1) % 5;

        switch (giMenuRandom)
        {
            case 0:
                userRole = "Inspector";
                break;
            case 1:
                userRole = "Closer";
                break;
            case 2:
                userRole = "Reporter";
                break;
            case 3:
                userRole = "Manager";
                break;
            defaults:
                userRole = "Admin";
                break;
        }
        FimsDrawerItems = RoleToDrawerItems[userRole];
        StateHasChanged();
    }

}

<style>
    /* most styles for header are defined in main.css */
    .header {
        height: 50px;
        background-color: darkslateblue
    }
</style>
<style>
    .k-drawer-item {
        align-items: center;
    }

    .k-drawer-container {
        position: relative;
        width: 100%;
        height: calc(100vh - 60px);
        //background-color: crimson;
    }

    .k-drawer-content {
        padding: 15px;
        //font-size: 18px;
        //background-color: lightseagreen;
    }

    .k-drawer-content h6 {
        margin-top: 15px;
        //background-color: darksalmon;
    }

    .custom-toolbar {
        width: 100%;
        background-color: coral;
        line-height: 10px;
        border-bottom: inset;
        border-bottom-width: 1px;
        padding: 3px 8px;
        color: #656565;
    }
</style>
